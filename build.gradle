buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.114'
    }
}

plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
    id "org.ajoberstar.grgit" version "3.1.0"
    id 'java-library'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
}

version = project.mod_version
group = project.maven_group

import org.apache.commons.codec.digest.DigestUtils

def getSubprojectVersion(project, version) {
    if (grgit == null) {
        return version + "+nogit"
    }

    def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)

    if (latestCommits.isEmpty()) {
        return version + "+uncommited"
    }

    return version + "+" + latestCommits.get(0).id.substring(0, 8) + DigestUtils.sha256Hex(project.minecraft_version).substring(0, 2)
}

def moduleDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'dev') }
    project.dependencies {
        deps.each {
            api it
        }
    }
    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    deps.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

allprojects {
    repositories {
        maven {
            url = "https://www.cursemaven.com"
        }
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    }


    apply plugin: "fabric-loom"
    apply plugin: "maven-publish"
    apply plugin: "com.matthewprenger.cursegradle"

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    group = "net.fabricmc.fabric-api"

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    configurations {
        dev
    }

    loom {
        shareRemapCaches = true
    }

    repositories {
        mavenLocal()
    }

    jar {
        archiveClassifier = "dev"

        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar")
            archiveFileName = "${archivesBaseName}-${project.version}.jar"
        }

        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${project.version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version
            filteringCharset "UTF-8"

            filesMatching("fabric.mod.json") {
                expand "version": project.version
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }



    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        archivesBaseName = project.archives_base_name
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }
}

subprojects {
    javadoc.enabled = false
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

def devOnlyModules = [
        ""
]

dependencies {
    modImplementation "com.terraformersmc:modmenu:2.0.9"
    include modImplementation('software.bernie.geckolib:geckolib-fabric-1.17:3.0.13:dev')

    afterEvaluate {
        subprojects.each {
            api(project(path: ":${it.name}", configuration: "dev"))

            if (!(it.name in devOnlyModules)) {
                include project("${it.name}:")
            }

            //testmodImplementation project("${it.name}:").sourceSets.testmod.output
        }
    }
}